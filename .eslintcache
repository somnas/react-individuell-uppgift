[{"/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/index.js":"1","/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/reportWebVitals.js":"2","/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/App.js":"3","/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/pages/CustomerCreatePage.jsx":"4","/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/pages/CustomerListPage.jsx":"5","/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/pages/CustomerDetailPage.jsx":"6","/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/pages/CustomerUpdatePage.jsx":"7","/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/pages/HomePage.jsx":"8","/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/pages/LoginPage.jsx":"9","/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/components/CustomerListItem.jsx":"10","/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/contexts/CustomerContext.js":"11"},{"size":595,"mtime":1610374562000,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1610288012000,"results":"14","hashOfConfig":"13"},{"size":1287,"mtime":1610896665347,"results":"15","hashOfConfig":"13"},{"size":2287,"mtime":1610550732000,"results":"16","hashOfConfig":"13"},{"size":868,"mtime":1610377528000,"results":"17","hashOfConfig":"13"},{"size":3265,"mtime":1610896021408,"results":"18","hashOfConfig":"13"},{"size":2495,"mtime":1610639160000,"results":"19","hashOfConfig":"13"},{"size":926,"mtime":1610552078000,"results":"20","hashOfConfig":"13"},{"size":1388,"mtime":1610552078000,"results":"21","hashOfConfig":"13"},{"size":345,"mtime":1610381057000,"results":"22","hashOfConfig":"13"},{"size":90,"mtime":1610895984565,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n9yu3k",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},"/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/index.js",[],"/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/reportWebVitals.js",[],"/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/App.js",[],"/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/pages/CustomerCreatePage.jsx",[],["50","51"],"/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/pages/CustomerListPage.jsx",[],"/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/pages/CustomerDetailPage.jsx",["52"],"import React, {useState, useEffect} from 'react'\nimport {useHistory, Link} from 'react-router-dom'\n\n\nexport default function CustomerDetailPage(props) {\n\n    const customerId = props.match.params.id\n    const [customerItem, setCustomerItem] = useState(null)\n    const history = useHistory()\n\n    useEffect(() => {\n        getCustomerItem()\n    }, [])\n    \n    function getCustomerItem() {\n        const url = `https://frebi.willandskill.eu/api/v1/customers/${customerId}/`\n        const token = localStorage.getItem(\"WEBB20\")\n        fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n            })\n            .then(res => res.json())\n            .then(data => setCustomerItem(data))\n        }\n\n    function deleteCustomer() {\n        const url = `https://frebi.willandskill.eu/api/v1/customers/${customerId}/`\n        const token = localStorage.getItem(\"WEBB20\")\n        fetch(url, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n        })\n        .then(() => history.push(\"/customers\"))\n    }\n    \n    return (\n        <div>            \n            {customerItem\n            ? (\n                <div>\n                    <h1>{customerItem.name}</h1>\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td>Email</td>\n                                <td>{customerItem.email}</td>\n                            </tr>\n                            <tr>\n                                <td>Phone number</td>\n                                <td>{customerItem.phoneNumber}</td>\n                            </tr>\n                            <tr>\n                                <td>Website</td>\n                                <td>{customerItem.website}</td>\n                            </tr>\n                            <tr>\n                                <td>Company number</td>\n                                <td>{customerItem.organisationNr}</td>\n                            </tr>\n                            <tr>\n                                <td>VAT number</td>\n                                <td>{customerItem.vatNr}</td>\n                            </tr>\n                            <tr>\n                                <td>Payment term</td>\n                                <td>{customerItem.paymentTerm}</td>\n                            </tr>\n                            <tr>\n                                <td>Reference</td>\n                                <td>{customerItem.reference}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <Link to={`/customers/${customerId}/edit`}><button>Edit Customer</button></Link>\n                    <button onClick={deleteCustomer}>Delete Customer</button>\n                    <Link to={`/customers/${customerId}/edit`}>Edit Customer</Link>\n                </div>                \n            )\n            :\n            (\n                <p>Laddar data</p>\n            )\n            }            \n        </div>\n    )\n}\n","/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/pages/CustomerUpdatePage.jsx",["53"],"import React, {useState, useEffect} from 'react'\nimport {useHistory} from 'react-router-dom'\n\nexport default function CustomerUpdatePage(props) {\n\n    const customerId = props.match.params.id    \n    const history = useHistory()\n    const [formData, setFormData] = useState({})\n\n    useEffect(() => {\n        getCustomerItem()\n    }, [])\n\n    function getCustomerItem() {\n        const url = `https://frebi.willandskill.eu/api/v1/customers/${customerId}/`\n        const token = localStorage.getItem(\"WEBB20\")\n        fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n            })\n            .then(res => res.json())\n            .then(data => setFormData(data))\n        }\n\n    function renderInput(name, label, type) {\n        return(\n            <div>\n                <label>{label}</label>\n                <input\n                type={type || \"text\"}\n                name={name}\n                value={formData[name]}\n                onChange={e => {\n                    setFormData({...formData, [e.target.name]: e.target.value}) \n                }}\n                />\n            </div>\n        )\n    }\n\n    function handleOnSubmit(e) {\n        e.preventDefault()\n        const url = `https://frebi.willandskill.eu/api/v1/customers/${customerId}/`\n        const token = localStorage.getItem(\"WEBB20\")\n        fetch(url, {\n            method: \"PUT\",\n            body: JSON.stringify(formData),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n        })\n        .then(res => res.json)\n        .then(data => history.push(`customers/${customerId}`))\n    }\n\n    return (\n        <div>\n            <h1>Update Customer</h1>\n            <form onSubmit={handleOnSubmit}>\n                {renderInput(\"name\", \"Customer Name\")}\n                {renderInput(\"email\", \"Customer Email\", \"email\")}\n                {renderInput(\"organisationNr\", \"Organisation Number\")}\n                {renderInput(\"paymentTerm\", \"Payment Term\", \"number\")}\n                {renderInput(\"phoneNumber\", \"Phone Number\", \"tel\")}\n                {renderInput(\"reference\", \"Reference\")}\n                {renderInput(\"vatNr\", \"Vat Number\")}\n                {renderInput(\"website\", \"Website\", \"url\")}\n                <button type=\"submit\">Update Customer</button>\n            </form>\n        </div>\n    )\n}\n","/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/pages/HomePage.jsx",[],"/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/pages/LoginPage.jsx",[],"/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/components/CustomerListItem.jsx",[],"/Users/admin/Documents/Webutveckling/Nackademin/Filer/Frontend-3/individuell-uppgift/src/contexts/CustomerContext.js",["54"],"import React, {createContext} from 'react'\n\nexport const CustomerContext = createContext()",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":13,"column":8,"nodeType":"61","endLine":13,"endColumn":10,"suggestions":"62"},{"ruleId":"59","severity":1,"message":"60","line":12,"column":8,"nodeType":"61","endLine":12,"endColumn":10,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":8,"nodeType":"66","messageId":"67","endLine":1,"endColumn":13},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCustomerItem'. Either include it or remove the dependency array.","ArrayExpression",["70"],["71"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},{"desc":"72","fix":"74"},"Update the dependencies array to be: [getCustomerItem]",{"range":"75","text":"76"},{"range":"77","text":"76"},[347,349],"[getCustomerItem]",[334,336]]